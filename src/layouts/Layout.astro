---
import '@/styles/global.css';
import { getClientInitializeValues, getStatsigUser } from '@/lib/statsig-server';
import CookieBanner from '@/components/CookieBanner.astro';

export interface Props {
  title: string;
  description?: string;
}

const { title, description = 'Engage by Lexara - Transform your customer engagement' } = Astro.props;

const initializeValues = await getClientInitializeValues(Astro);
const statsigUser = await getStatsigUser(Astro);
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Lora:ital,wght@0,400;0,500;0,600;0,700;1,400;1,500;1,600;1,700&family=Open+Sans:ital,wght@0,300;0,400;0,500;0,600;0,700;1,300;1,400;1,500;1,600;1,700&display=swap" rel="stylesheet">
    <title>{title} | Engage by Lexara</title>
    <script define:vars={{ statsigUser, initializeValues, clientKey: import.meta.env.PUBLIC_STATSIG_CLIENT_KEY }}>
      window.__STATSIG_USER__ = statsigUser;
      window.__STATSIG_INIT_VALUES__ = initializeValues;
      window.__STATSIG_CLIENT_KEY__ = clientKey;
    </script>
  </head>
  <body class="min-h-screen bg-white text-gray-900">
    <slot />
    <CookieBanner />
    <script>
      import { initStatsigClient } from '@/lib/statsig-client';
      import { logPageView } from '@/lib/analytics';
      
      function initializeAnalytics() {
        if (window.__STATSIG_CLIENT_KEY__) {
          const consent = (window as any).checkCookieConsent?.();
          
          // Only initialize analytics if we have consent
          if (consent?.allowsAnalytics) {
            initStatsigClient(window.__STATSIG_USER__, window.__STATSIG_INIT_VALUES__).then(() => {
              // Log page view
              const pageTitle = document.title.split('|')[0].trim();
              logPageView(pageTitle, {
                utm_source: new URLSearchParams(window.location.search).get('utm_source'),
                utm_campaign: new URLSearchParams(window.location.search).get('utm_campaign'),
                utm_medium: new URLSearchParams(window.location.search).get('utm_medium'),
              });
            });
          }
        }
      }
      
      // Initialize immediately if consent already given
      if ((window as any).checkCookieConsent?.()?.allowsAnalytics) {
        initializeAnalytics();
      }
      
      // Listen for consent updates
      window.addEventListener('cookieConsentUpdate', (event: any) => {
        if (event.detail.consent === 'all') {
          initializeAnalytics();
        }
      });
    </script>
  </body>
</html>